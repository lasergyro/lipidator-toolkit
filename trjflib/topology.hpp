#ifndef HAVE_CONFIG
#include "config.hpp"
#endif


struct Molecule
{
 string name;
 vector<string> atoms; //Create Atom List vs. 
};


struct Topology
{
  vector<Molecule> molecules;
  vector<int> moltypes;
  vector<int> atmol;
  vector<int> hastype;
  int nmol;
  vector<int> GetMolsOfType(int Type)
  {
    vector<int> molbox;
    for(int i=0;i!=atmol.size();i++)
    {
      if(hastype[i]==Type)
      {
	    bool covered=false;
	    for(int j=0;j!=molbox.size();j++)
	    {
	      if(atmol[i]==molbox[j]) covered=true;
	    }
	    if(!covered) molbox.push_back(atmol[i]);
      }
    }
   return molbox;
  }
  /**
  Returns the Atom indices of Atoms in one Molecule --> Tool to convert atmol information
  TODO Refacturing with Analyzer
  **/
    vector<int> GetMoleculeAtoms(int inMol)
    {
      vector<int> indices;
      indices.clear();
    int molof=atmol[inMol];
    for(int i=0;i!=atmol.size();i++)
      if(atmol[i]==molof) indices.push_back(i);
    return indices;
    }
    
    int GetMolOf(int index)
    {
      return atmol[index];
    }
    
    vector<int> GetMoleculeNo(int Mol)
    {
      vector<int> indices;
      indices.clear();
    for(int i=0;i!=atmol.size();i++)
      if(atmol[i]==Mol) indices.push_back(i);
    return indices;
    }
  
 /* bool Merge(Topology &top2)
  {
	for(int j=0;j!=molatoms.size();j++)
    
  }*/

  int GetTypeOf();
  /**
   * The atoms have to be provided ordered
   * **/
  bool AddMolecule(vector<int> &molatoms, int moltype)
  {
    int nmol=GetMolNum();
	for(int j=0;j!=molatoms.size();j++)
	{
	atmol.push_back(nmol+1);
	hastype.push_back(moltype);
        moltypes.push_back(j);  
//	cout << j << endl;
	}
     return true;
  }
  
  int GetMolNum()
  {
    vector<int> molist;
    for(int i=0;i!=atmol.size();i++)
    {
          bool isknown=false;
          for(int j=0;j!=molist.size();j++)
	    if(atmol[i]==molist[j]) isknown=true; 
	  if(!isknown) molist.push_back(atmol[i]);
      
    }
    return molist.size();
  }
  
  
  bool AddMolecule(vector<int> &molatoms, string molname)
  {
    for(int j=0;j!=molecules.size();j++)
	{
	  if(molecules[j].name==molname)
	    return AddMolecule(molatoms, j);
	  
	}
	return false;
  }
  
  bool AddMolType(Molecule &mol)
  {
    molecules.push_back(mol);
    return true;
  };
  
  void toTop(ostream &out)
  {
//    out << "; Generated by XYZlib " << endl;
//    out << "; Please add itp files" << endl;
    out << endl;
    vector<int> permolecule;
    vector<int> typenr;
    vector<int> done;
    done.clear();
    permolecule.resize(molecules.size());
         int lastmol=atmol[0]; 
	 permolecule[hastype[0]]++;
    for(int i=0;i!=atmol.size();i++)
    {
      if(atmol[i]!=lastmol)
      {
	done.push_back(lastmol);
	bool isdone=false;
	for(int j=0;j!=done.size();j++)
	  if(done[j]==atmol[i]) isdone=true;
	if(!isdone && hastype[i]<permolecule.size()) permolecule[hastype[i]]++;	
      }
      lastmol=atmol[i]; 
    }
    for(int i=0;i!=molecules.size();i++)
    {
     out << molecules[i].name << "     " << permolecule[i] << endl; 
    }
  }
};
